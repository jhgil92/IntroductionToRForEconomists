results[ ,12]  <-  mean(X[12,])
return(results)
}
## Erstelle Vektor der ?nge 12 um Passagierzahlen Monaten hinzuzuf?gen
monate <- c(1:12)
meanpass <- meanpassnumbers(monthlydates)
plot(monate, meanpass, type = "l", main = "distribution of passengers",
ylab = "mean number ", xlab = "months")
monate <- c(1:12)
meanpass
barplot(meanpass)
##4. Porsche-Aufgabe
Porsche <- read.csv2("Porsche911.csv")
names(Porsche)
## age summary and variance, cov, cor, se, sd
summary(Porsche[,3]) ## age summary
var(Porsche[,3]) ## age variance
cov(Porsche[,3], Porsche[,4]) ## age gegen TKM
cor(Porsche[,3], Porsche[,4]) ## age gegen TKM
sd(Porsche[,3])/sqrt(length(Porsche[,3])) ##standard error age
sd(Porsche[,3]) ## standard deviation age
## TKM
summary(Porsche[,4]) ## TKM summary
var(Porsche[,4]) ## TKM variance
cov(Porsche[,4], Porsche[,5]) ## TKM gegen price
cor(Porsche[,4], Porsche[,5]) ## TKM gegen price
sd(Porsche[,4])/sqrt(length(Porsche[,4])) ## standard error TKM
sd(Porsche[,4]) ## standard deviation TKM
## price
summary(Porsche[,5]) ## summary price
var(Porsche[,5]) ## price variance
cov(Porsche[,5], Porsche[,3]) ## price gegen age
cor(Porsche[,5], Porsche[,3]) ## price gegen age
sd(Porsche[,5])/sqrt(length(Porsche[,5])) ## standard deviation price
sd(Porsche)
## TKM
summary(Porsche[,4]) ## TKM summary
var(Porsche[,4]) ## TKM variance
cov(Porsche[,4], Porsche[,5]) ## TKM gegen price
cor(Porsche[,4], Porsche[,5]) ## TKM gegen price
sd(Porsche[,4])/sqrt(length(Porsche[,4])) ## standard error TKM
sd(Porsche[,4]) ## standard deviation TKM
## price
summary(Porsche[,5]) ## summary price
var(Porsche[,5]) ## price variance
cov(Porsche[,5], Porsche[,3]) ## price gegen age
cor(Porsche[,5], Porsche[,3]) ## price gegen age
sd(Porsche[,5])/sqrt(length(Porsche[,5])) ## standard deviation price
sd(Porsche)
##4.2
##age
boxplot(Porsche[,3], main = "car ages", ylab = "years")
##TKM
boxplot(Porsche[,4], main = "car usage", ylab = "thousand kilometers")
## price
boxplot(Porsche[,5], main = "price", ylab = " in 1000 Euro")
##4.3
## age
ecdf(Porsche[,3])
## TKM
ecdf(Porsche[,4])
##price
ecdf(Porsche[,5])
##age
truehist(Porsche[,3], main = "prob. of car age", ylab = "Frequency", xlab = "age")
## TKM
truehist(Porsche[,4], main = "Kilometer values", ylab = "Frequency", xlab = "kilometers")
## price
truehist(Porsche[,5], main = "car prices", ylab = "Frequency", xlab = "in US $")
##age
truehist(Porsche[,3], main = "prob. of car age", ylab = "Frequency", xlab = "age")
## TKM
truehist(Porsche[,4], main = "Kilometer values", ylab = "Frequency", xlab = "kilometers")
n <- 100
R <- 1000
Z <- rep(NA,R) ## erstelle leeren Vektor der L?nge R
Rxn <-    matrix(runif(R*n,min = 0, max = 1), R, n)
##definiere random variables, die Maximalwerte aus Rxn speichern
Mn <-  apply(Rxn, c(1), max)
Mn
## definiere normalized version
normMn <- (Mn-1)*n
normMn
## Erstelle Histogramm zur Verteilung
truehist(normMn, main = "Normalisierter Wert")
eline <- seq(-10,0, lenght = R)  ## Erstelle Sequenz, die als Linie dargestellt wird
lines(eline, exp(eline), col = "green", lwd = 1) ## F?ge Linie hinzu
##7
school <- read.csv("caschool.csv")
## Install packages for Timeseries
library(tseries)
library(MASS)
library(fGarch)
head(school)
## make variables accessible
testscore <- school$testscr
studentteacherratio <- school$str
pell <- school$el_pct
expStu <- school$expn_stu
##7.2 regression for testscore and studentteacher ratio
regression1 <- lm(testscore ~ studentteacherratio)
regression1
## assign residuals in r1
r1 <- residuals(regression1)
r1
##Now regress testscr on an intercept, str , el_pct and expn_stu
regression2 <- lm(testscore ~ studentteacherratio + pell + expStu)
regression2
r2 <- residuals(regression2)
ssr1 <-sum(r1^2)
ssr1
ssr2 <- sum(r2^2)
ssr2
plot(r1, main = "Distribution of residuals", xlab = "xvalues", ylab = "distribution")
points(r2, col = "red")
predict(regression2, data.frame(studentteacherratio =25, pell = 60, expStu = 4000))
coeftest(regression2,vcov=vcovHC)
ttestH0 <- c("studentteacherratio=0", "expStu=0", "pell = -0.7")
ttestH0
linearHypothesis(lm(testscore ~ studentteacherratio + expStu + pell), ttestH0)
R <- 10000
n <- 100
Z <- rep(NA, R) ##Erstelle leeren Vektor der L?nge R
for (i in 1:R){
X <- cbind(1,mvrnorm(n=n,c(5,10),matrix(c(1,0.9,0.9,1),2,2)))
b <- c(3, 2, -1)
e <- runif(n, -1, 1) ## Erstellt uniformally distr.  Werte von -1 bis 1 (siehe Aufgabe)
y <- X %*% b + e
b_estimate <- solve(t(X) %*% X) %*% t(X) %*% y
Z[i] <- b_estimate[2]
}
head(Z, 5)
library(foreign)
truehist(Z) ## erstelle Histogramm von Verteilung
N <- density(mean(Z),sd(Z))
plot(N, main = "Distribution" ) ## Erstelle eine Dichtefunktion und plotte diese
truehist(Z)
lines(N)
mysum = function(n,a){
if (n==0) 0
else ((n^a)/((n^a)+1)+mysum(n-1,a))}
psum <- function(n,a){
s <- 0
for(k in 0:n){
s <- s + (k^a)/(k^a + 1)
}
return(s)
}
mysum(3,1)
psum(3,1)
mysum(10,10)
psum(10,10)
mysum = function(n,a){
if (n==0) 0
else ((n^a)/((n^a)+1)+mysum(n-1,a))}
psum <- function(n,a){
sna <- 0
for (k in 0:n) {
sna <- sna + k^a / (k^a + 1)
}
return(sna)
}
mysum(3,1)
psum(3,1)
mysum(10,10)
psum(10,10)
A <- matrix(c(1, 2, 4, 3, 1, 5, 3, 6, 1, 8, 7, 5, 3, 6, 9, 1), 4, 4) #define A
b <- matrix(c(1, 4, 3, 5), 4, 1) #define b
a <- solve(A) #inverse A
eigen(A)$values #compute eigenvalues of A
x <- a %*% b #solve for x
print(x)
psum<-function(n,a){
if(!(n >= 1 & (n %% 1) == 0 & a > 0)){ #constraints on n to be positive and a whole number (no rest if divided by 1) and a to be positive
return ("Error, please choose positive a and natural n")
}
s <- 0
for (k in 0:n) {
s <- s + ((k^a)/(k^a + 1))
}
return (s)
}
psum(4,1) #check
psum(4.4,1)#check for error message
mysum(3,1)
psum(3,1)
mysum(10,10)
psum(10,10)
mymatrix <- function(n){
new_matrix <- matrix(1, n, n)
for (i in 1:n){
if (!(i == 1 | i == n)){
new_matrix[i, 2 : (n - 1)] <- 0
}
}
return(new_matrix)
}
mymatrix(5) #check
head(apass)
apass <- read.csv(choose.files("apass.csv"))
apass <- read.csv("apass.csv")
vector_date <- seq(as.Date ("1949/1/1"), as.Date ("1959/12/1"), by = "month") #create a vector with dates
apass["dates"] <- vector_date #add the vector to the dataframe
head(apass)
plot(apass$dates, apass$y,
main = "Passenger numbers from Jan 1949 to Dec 1959",
xlab = "Years",
ylab = "Passengers",
col = "blue",
type = "l")
vector_means <- rep(0,12) #create an empty vector of means for each of 12 months
k <- 1 #create a counter
#sum months and find average
for(i in 1:11){ #loop years
for(j in 1:12){ #loop months
vector_means[j] <- vector_means[j] + (apass$y[k]/11) #accumulate a passenger number for each month for every year and divide by the number of years
k <- k+1
}
}
# make chart
barplot(vector_means,
names.arg = c(1:12),
main = "The mean passenger numbers for each month (Jan 1949 - Dec 1959)",
xlab = "Month",
ylab = "Mean passenger numbers", col = "lightblue")
box()
porsche <- read.csv2("Porsche911.csv")
summary(porsche[3:5]) #compute the min, max, mean and 3 quartiles
var(porsche[3:5]) #find variance-covariance matrix (variance on the diagonal)
apply(porsche[3:5], 2, sd) #find standard deviations
cor(porsche[3:5]) #find Pearson correlation coefficients
boxplot(porsche[3:5],
main = "Boxplots for age, TKM and price",
ylab = "years (age), kkm (TKM), kEur (price)",
col = "lavender")
plot(ecdf(porsche$age),main = "ECDF of Age", xlab = "Years", ylab = "Cumulative Probability")
plot(ecdf(porsche$TKM),main = "ECDF of TKM", xlab = "Thou. km", ylab = "Cumulative Probability")
plot(ecdf(porsche$price),main = "ECDF of Price", xlab = "Thou. Euros", ylab = "Cumulative Probability")
library(MASS)
truehist(porsche$age, main = "Histogram of Age", xlab = "Age in years", ylab = "Density", col = "slategray1")
truehist(porsche$TKM, main = "Histogram of TKM", xlab = "TKM in thou. km", ylab = "Density",col = "powderblue")
truehist(porsche$price, main = "Histogram of Price", xlab = "Price in thou. Euros", ylab = "Density",col = "lavender")
n <- 1000 #number of trials
x <- arima.sim(list(order = c(1,0,0), ar = 0.5), n, innov = runif(n, -1, 1)) + 2 #simulated AR(1) process with expected value (mu) equal 2
m <- rep(NA, n) #compute the cumulated means
for (i in 1:n) {
m[i] <- cumsum(x)[i] / i
}
plot(m, ylim = c(1, 3), #plot the convergence of cumulated means to the expected value mu
type = "l",
main = "Law of large numbers on the example of AR(1) process",
xlab = "Number of trials",
ylab = "Average")
abline (h = 2, col = "red")
n <- 100
R <- 1000
mymatrix <- matrix(runif(R*n, 0, 1), R, n) #create a matrix
mn <- apply(mymatrix, 1, max) #compute the maximum for each raw
mn_head <- (mn - 1)*n #normalise the vector mn
library(MASS)
truehist(mn_head, #plot mn_head and weibull density with parameters (1,1) to demonstrate convergence
main = "Histogram of Mn_head",
xlab = "Values of Mn_head",
ylab = "Density",
col = "lavender")
x <- seq(0, 8, by = 0.1)
lines(-x, dweibull(x, 1, 1), col = "magenta4")
caschool <- read.csv("caschool.csv")
# Assign the vectors to variables
testscr <- caschool$testscr
str <- caschool$str
el_pct <- caschool$el_pct
expn_stu <- caschool$expn_stu
plot(testscr ~ str, main = "Linear dependence between testscr and str")
model1 <- lm(testscr ~ str) #regress testscr on str
abline(model1, col = "red") #plot the data, looks not like there is any linear dependence between testscr and str
summary(model1)
r1 <- model1$residuals #save residuals from model 1 into r1
model2 <- lm(testscr ~ str + el_pct + expn_stu)
summary(model2)
r2 <- model2$residuals #save residuals from model 2 into r2
sum(r1^2)
sum(r2^2)
plot(r1, col = "blue", main = "Residulas for models 1 (blue) and 2 (red)", xlab = "Residuals", ylab = "Residual value")
points(r2, col = "red")
#Direct way:
prediction_model2 <- predict(model2, newdata = data.frame(str = 25, el_pct = 60, expn_stu = 4000))
print(prediction_model2)
#More straight-forward and intuitive way:
coeffs_m2 <- coefficients(model2) #save coefficients into the vector coeffs_m2
answer <- coeffs_m2[2]*25 + coeffs_m2[3]*60 + coeffs_m2[4]*4000 + coeffs_m2[1] #execute prediction
print(answer)
#print(ans)
library(sandwich)
library(zoo)
library(lmtest)
coeftest(model2, vcovHC) #compute heteroscedastic robust standard errors
library(car)
linearHypothesis(model2, hypothesis.matrix = c("str = 0", "expn_stu = 0", "el_pct = -0.7"))
#Hypothesis is rejected.
mysum = function(n,a){
if (n==0) 0
else ((n^a)/((n^a)+1)+mysum(n-1,a))}
psum <- function(n, a) {
k <- n
y <- k^a / (k^a + 1)
return(sum(y))
}
mysum(3,1)
psum(3,1)
mysum(10,10)
psum(10,10)
mysum(0,1)
mysum = function(n,a){
if (n==0) 0
else ((n^a)/((n^a)+1)+mysum(n-1,a))}
psum<- function(k,a){
s<- sum(k^a/(k^a+1))
return(s)
}
mysum(3,1)
psum(3,1)
mysum(10,10)
psum(10,10)
A <- matrix(c(1,2,4,3,1,5,3,6,1,8,7,5,3,6,9,1),4,4)
b <- matrix(c(1,4,3,5),4,1)
x <- solve(A,b)
print(x)
solve(A)
eigen(A)
psum <-  function(n,a){
if(n >=1 & a >0){
Z <- c(NA,n)
for (k in 1:n) {
s <- k^a/(k^a+1)
Z[k] <- s
}
}
return(sum(Z))
}
mysum(3,1)
psum(3,1)
mysum(10,10)
psum(10,10)
mymatrix <- function(n){
y <- matrix(c(rep(1,times = n),rep(c(1,rep(0,times = n-2),1),times= n-2),rep(1,times = n)),nrow = n,ncol = n)
return(y)
}
#define n=4
mymatrix(n=4)
apass
Monthdata <- seq(as.Date("1949-01-01"),as.Date("1959-12-01"),by = "months")
pMonth <- format(as.Date(Monthdata),"%Y-%m")
#add month vector to create a new dataframe
apassnew <- data.frame(pMonth,apass)
head(apassnew)
library(zoo)
passenger <- ts(apassnew$y, start = c(1949,1),frequency = 12)
plot(passenger, main = "passenger numbers of US airlines", xlab = "month", ylab = "number",las=3,type = "o")
mos <- rep(1:12,11)
meanmonth <- tapply(apass[,1],mos,mean)
barplot(meanmonth, col = "lightblue",main = "mean passenger numbers of each month", xlab = "month",ylab = "mean number")
apply(porsche911[,3:5],2,mean)
porsche911 <- read.csv2("Porsche911.csv")
boxplot(porsche911[,3:5],main = "boxplot for age,TKM and price")
library(MASS)
par(mfrow = c(2, 3))
plot(ecdf(porsche911$age),main = "ECDF of age",xlab = "value of age",ylab = "Cumulative Probability")
plot(ecdf(porsche911$TKM),main = "ECDF of TKM",xlab = "value of TKM",ylab = "Cumulative Probability")
plot(ecdf(porsche911$age),main = "ECDF of price",xlab = "value of price",ylab = "Cumulative Probability")
truehist(porsche911$age, col = "lightblue", xlab = "value of age", ylab = "density")
truehist(porsche911$TKM, col = "lightblue", xlab = "value of TKM", ylab = "density")
truehist(porsche911$price, col = "lightblue", xlab = "value of price ", ylab = "density")
#parameters rho = 0.5,mu=2
X <- arima.sim(list(order = c(1,0,0),ar = .5), n= 10000, innov = runif(n=10000,min = -1,max = 1)) + 2
mean(X)
showLLN <- function(n,X){
y <- rep(0,n)
for (i in 1:n) {
y[i] <- mean(sample(X,i,replace = T))
}
LLN <- data.frame(1:n,y)
list(LLN=LLN)
}
sim <- showLLN(n=10000,X)
LLNdata <- sim$LLN
colnames(LLNdata) <- c("sample_size","average_value")
library(ggplot2)
ggplot(LLNdata,aes(x=sample_size,y=average_value,color="path")) + labs(title="Trends of sample mean")+geom_line() + geom_abline(intercept=2,slope=0,color='black')
n <- 100
R <- 1000
#function to create random numbers
fn <- function(n){
X <- runif(n)
return(X)
}
#R??n matrix
Z <- matrix(NA,R,n)
#create matrix of random numbers
ZZ <- t(apply(Z,1,fn))
Mn1 <- function(n){
Y <- (cummax(n)-1)
return(Y)
}
ZZZ <- apply(ZZ,1,Mn1)
R_n_randommatrix <- t(ZZZ)
limitversion <- apply(R_n_randommatrix, 1,function(v){
Mn2 <- v*c(1:n)
return(Mn2)
})
#dim(limitversion)nrow=100,ncol=1000
#100th row contains the values of Mn_bar(n=100)
limitdata <- limitversion[100,]
par(mfrow = c(2, 1))
library(lattice)
library(ggplot2)
#sample data, sample size n=10,30,50,,100
dat <- data.frame(Mn = c(limitversion[10,],limitversion[30,],limitversion[50,],limitversion[100,]),lines =rep(c("10","30","50","100"),each = 1000) )
densityplot(~Mn,data=dat,groups = lines,
plot.points = FALSE, ref = TRUE,
auto.key = list(space = "right"))
#use graphs to guess the distribution
library(MASS)
truehist(limitdata,prob = T,main = "values of (Mn-1)*n(n=100)",xlab = "values of Mn_bar",ylab = "density")
lines(density(limitdata))
set.seed(1234)
n <- 100
R <- 1000
#function to create random numbers
fn <- function(n){
X <- runif(n)
return(X)
}
#R??n matrix
Z <- matrix(NA,R,n)
#create matrix of random numbers
ZZ <- t(apply(Z,1,fn))
#function to calculate (Mn-1)
Mn1 <- function(n){
Y <- (cummax(n)-1)
return(Y)
}
ZZZ <- apply(ZZ,1,Mn1)
R_n_randommatrix <- t(ZZZ)
#matrix of normalized version (Mn-1)*n
limitversion <- apply(R_n_randommatrix, 1,function(v){
Mn2 <- v*c(1:n)
return(Mn2)
})
#dim(limitversion)nrow=100,ncol=1000
#100th row contains the values of Mn_bar(n=100)
limitdata <- limitversion[100,]
par(mfrow = c(2, 1))
#plot the convergence
library(lattice)
library(ggplot2)
#sample data, sample size n=10,30,50,,100
dat <- data.frame(Mn = c(limitversion[10,],limitversion[30,],limitversion[50,],limitversion[100,]),lines =rep(c("10","30","50","100"),each = 1000) )
densityplot(~Mn,data=dat,groups = lines,
plot.points = FALSE, ref = TRUE,
auto.key = list(space = "right"))
#use graphs to guess the distribution
library(MASS)
truehist(limitdata,prob = T,main = "values of (Mn-1)*n(n=100)",xlab = "values of Mn_bar",ylab = "density")
lines(density(limitdata))
#fitted distribution function
fitdistr(limitdata*(-1),"weibull")
truehist(limitdata*(-1),prob = T,main = "fitted Weibull distribution",xlab = "value",ylab = "density")
x <- seq(min(limitdata*(-1)),max(limitdata*(-1)),length = 100)
lines(x,dweibull(x,shape = 1,scale = 1))
caschool <- read.csv("caschool.csv")
caschool <- read.csv("caschool.csv")
testscr <- caschool$testscr
str <- caschool$str
el_pct <- caschool$el_pct
expn_stu <- caschool$expn_stu
a <- lm(testscr~str)
summary(a)
r1 <- a$residuals
b <- lm(testscr~str+el_pct+expn_stu)
summary(b)
r2 <- b$residuals
sum(r1^2)
sum(r2^2)
plot(r1, main = "residuals of the two regression",ylab = "r1&r2")
points(r2,col = "red")
legend(100,45,legend = c("r1","r2"),col = c("black","red"),pch =  c(1,1))
forecast_b <- predict(b,newdata = data.frame(str = 25,el_pct = 60,expn_stu = 4000))
print(forecast_b)
library(lmtest)
library(sandwich)
coeftest(b, vcov = vcovHC)
library(car)
linearHypothesis(b,c("str = 0","expn_stu = 0","el_pct = -0.7"))
#Pr<0.05 we can reject the null hypothesis
mysum = function(n,a){
if (n==0) 0
else ((n^a)/((n^a)+1)+mysum(n-1,a))}
psum <-function(n, a) {
k <-seq(1:n)
Z <-rep(NA, n)
for (i in k) {
Z[i] <-(k[i]^a)/((k[i]^a)+1)
}
out <-sum(Z)
return(out)
}
psum(n = 3, a = 2)
mysum(3,1)
psum(3,1)
mysum(10,10)
psum(10,10)
