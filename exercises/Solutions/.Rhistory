if (testres$p.value < alph) {
print("The nullhypothesis of a unit root can be rejected. The time series is stationary.")
} else {
print("The nullhypothesis of a unit root cannot be rejected. The time series seems to be nonstationary.")
}
library(tseries)
plot(diff(invest1), type = "o")
testres1 <- adf.test(diff(invest1))
print(testres1)
alph <- 0.05
if (testres1$p.value < alph) {
print("The nullhypothesis of a unit root can be rejected. The time series is stationary.")
} else {
print("The nullhypothesis of a unit root cannot be rejected. The time series seems to be nonstationary.")
}
indices <- read.csv("../../data/indices.csv")
retdax <- diff(log(indices$dax))
garch(retdax, order = c(1, 1), trace = F)
garchFit(~garch(1, 1), data = retdax, trace = F)
garchFit(~arma(2, 0) + garch(1, 1), retdax, trace = F)
library(vars)
R <- 10000
Z <- matrix(NA, R, 4)
TT <- 200
A <- matrix(c(0.9, 0.5, 0, 0.5), 2, 2)
SIGepsi <- matrix(c(1, 0.3, 0.3, 1), 2, 2)
muepsi <- matrix(c(0,0),2,1)
for (r in 1:R) {
y <- matrix(NA, TT, 2)
colnames(y) <- c("y1","y2")
y[1, ] <- c(0, 0)
for (tt in 2:TT) {
epsi <- mvrnorm(n = 1, mu = muepsi, Sigma = SIGepsi)
y[tt, ] <- A %*% y[tt-1, ] + epsi
}
res <- VAR(y[101:200, ], p = 1)
y1ccoef <- res$varresult$y1$coefficients[1:2]
y2ccoef <- res$varresult$y2$coefficients[1:2]
Z[r, ] <- c(y1ccoef, y2ccoef)
}
apply(Z, 2, mean)
par(mfrow = c(2, 2))
library(MASS)
truehist(Z[, 1])
curve(dnorm(x,mean=mean(Z[, 1]),sd=sd(Z[, 1])),add=T)
truehist(Z[, 2])
curve(dnorm(x,mean=mean(Z[, 1]),sd=sd(Z[, 1])),add=T)
truehist(Z[, 3])
curve(dnorm(x,mean=mean(Z[, 1]),sd=sd(Z[, 1])),add=T)
truehist(Z[, 4])
curve(dnorm(x,mean=mean(Z[, 1]),sd=sd(Z[, 1])),add=T)
library(vars)
R <- 1000
Z <- matrix(NA, R, 4)
TT <- 200
A <- matrix(c(0.9, 0.5, 0, 0.5), 2, 2)
SIGepsi <- matrix(c(1, 0.3, 0.3, 1), 2, 2)
muepsi <- matrix(c(0,0),2,1)
# create progress bar
library(tcltk)
pb <- tkProgressBar(title = "progress bar", min = 0, max = R, width = 300)
for (r in 1:R) {
y <- matrix(NA, TT, 2)
colnames(y) <- c("y1","y2")
y[1, ] <- c(0, 0)
for (tt in 2:TT) {
epsi <- mvrnorm(n = 1, mu = muepsi, Sigma = SIGepsi)
y[tt, ] <- A %*% y[tt-1, ] + epsi
}
res <- VAR(y[101:200, ], p = 1)
y1ccoef <- res$varresult$y1$coefficients[1:2]
y2ccoef <- res$varresult$y2$coefficients[1:2]
Z[r, ] <- c(y1ccoef, y2ccoef)
setTkProgressBar(pb, r, label=paste(round(r/R*100, 0),"% done"))
}
close(pb)
apply(Z, 2, mean)
par(mfrow = c(2, 2))
library(MASS)
truehist(Z[, 1])
curve(dnorm(x,mean=mean(Z[, 1]),sd=sd(Z[, 1])),add=T)
truehist(Z[, 2])
curve(dnorm(x,mean=mean(Z[, 1]),sd=sd(Z[, 1])),add=T)
truehist(Z[, 3])
curve(dnorm(x,mean=mean(Z[, 1]),sd=sd(Z[, 1])),add=T)
truehist(Z[, 4])
curve(dnorm(x,mean=mean(Z[, 1]),sd=sd(Z[, 1])),add=T)
library(vars)
R <- 1000
Z <- matrix(NA, R, 4)
TT <- 200
A <- matrix(c(0.9, 0.5, 0, 0.5), 2, 2)
SIGepsi <- matrix(c(1, 0.3, 0.3, 1), 2, 2)
muepsi <- matrix(c(0,0),2,1)
# create progress bar
library(tcltk)
pb <- tkProgressBar(title = "progress bar", min = 0, max = R, width = 300)
for (r in 1:R) {
y <- matrix(NA, TT, 2)
colnames(y) <- c("y1","y2")
y[1, ] <- c(0, 0)
for (tt in 2:TT) {
epsi <- mvrnorm(n = 1, mu = muepsi, Sigma = SIGepsi)
y[tt, ] <- A %*% y[tt-1, ] + epsi
}
res <- VAR(y[101:200, ], p = 1)
y1ccoef <- res$varresult$y1$coefficients[1:2]
y2ccoef <- res$varresult$y2$coefficients[1:2]
Z[r, ] <- c(y1ccoef, y2ccoef)
setTkProgressBar(pb, r, label=paste(round(r/R*100, 0),"% done"))
}
close(pb)
apply(Z, 2, mean)
par(mfrow = c(2, 2))
library(MASS)
truehist(Z[, 1])
curve(dnorm(x,mean=mean(Z[, 1]),sd=sd(Z[, 1])),add=T)
truehist(Z[, 2])
curve(dnorm(x,mean=mean(Z[, 1]),sd=sd(Z[, 1])),add=T)
truehist(Z[, 3])
curve(dnorm(x,mean=mean(Z[, 1]),sd=sd(Z[, 1])),add=T)
truehist(Z[, 4])
curve(dnorm(x,mean=mean(Z[, 1]),sd=sd(Z[, 1])),add=T)
library(vars)
R <- 1000
Z <- matrix(NA, R, 4)
TT <- 200
A <- matrix(c(0.9, 0.5, 0, 0.5), 2, 2)
SIGepsi <- matrix(c(1, 0.3, 0.3, 1), 2, 2)
muepsi <- matrix(c(0,0),2,1)
# create progress bar
library(tcltk)
pb <- tkProgressBar(title = "progress bar", min = 0, max = R, width = 300)
for (r in 1:R) {
y <- matrix(NA, TT, 2)
colnames(y) <- c("y1","y2")
y[1, ] <- c(0, 0)
for (tt in 2:TT) {
epsi <- mvrnorm(n = 1, mu = muepsi, Sigma = SIGepsi)
y[tt, ] <- A %*% y[tt-1, ] + epsi
}
res <- VAR(y[101:200, ], p = 1)
y1ccoef <- res$varresult$y1$coefficients[1:2]
y2ccoef <- res$varresult$y2$coefficients[1:2]
Z[r, ] <- c(y1ccoef, y2ccoef)
setTkProgressBar(pb, r, label=paste(round(r/R*100, 0),"% done"))
}
close(pb)
apply(Z, 2, mean)
par(mfrow = c(2, 2))
library(MASS)
truehist(Z[, 1])
curve(dnorm(x,mean=mean(Z[, 1]),sd=sd(Z[, 1])),add=T)
truehist(Z[, 2])
curve(dnorm(x,mean=mean(Z[, 1]),sd=sd(Z[, 1])),add=T)
truehist(Z[, 3])
curve(dnorm(x,mean=mean(Z[, 1]),sd=sd(Z[, 1])),add=T)
truehist(Z[, 4])
curve(dnorm(x,mean=mean(Z[, 1]),sd=sd(Z[, 1])),add=T)
apply(Z, 2, mean)
par(mfrow = c(2, 2))
library(MASS)
truehist(Z[, 1])
curve(dnorm(x,mean=mean(Z[, 1]),sd=sd(Z[, 1])),add=T)
truehist(Z[, 2])
curve(dnorm(x,mean=mean(Z[, 1]),sd=sd(Z[, 1])),add=T)
truehist(Z[, 3])
curve(dnorm(x,mean=mean(Z[, 1]),sd=sd(Z[, 1])),add=T)
truehist(Z[, 4])
curve(dnorm(x,mean=mean(Z[, 1]),sd=sd(Z[, 1])),add=T)
library(vars)
R <- 1000
Z <- matrix(NA, R, 4)
TT <- 200
A <- matrix(c(0.9, 0.5, 0, 0.5), 2, 2)
SIGepsi <- matrix(c(1, 0.3, 0.3, 1), 2, 2)
muepsi <- matrix(c(0,0),2,1)
# create progress bar
library(tcltk)
pb <- tkProgressBar(title = "progress bar", min = 0, max = R, width = 300)
for (r in 1:R) {
y <- matrix(NA, TT, 2)
colnames(y) <- c("y1","y2")
y[1, ] <- c(0, 0)
for (tt in 2:TT) {
epsi <- mvrnorm(n = 1, mu = muepsi, Sigma = SIGepsi)
y[tt, ] <- A %*% y[tt-1, ] + epsi
}
res <- VAR(y[101:200, ], p = 1)
y1ccoef <- res$varresult$y1$coefficients[1:2]
y2ccoef <- res$varresult$y2$coefficients[1:2]
Z[r, ] <- c(y1ccoef, y2ccoef)
setTkProgressBar(pb, r, label=paste(round(r/R*100, 0),"% done"))
}
close(pb)
apply(Z, 2, mean)
par(mfrow = c(2, 2))
library(MASS)
truehist(Z[, 1])
curve(dnorm(x,mean=mean(Z[, 1]),sd=sd(Z[, 1])),add=T)
truehist(Z[, 2])
curve(dnorm(x,mean=mean(Z[, 2]),sd=sd(Z[, 2])),add=T)
truehist(Z[, 3])
curve(dnorm(x,mean=mean(Z[, 3]),sd=sd(Z[, 3])),add=T)
truehist(Z[, 4])
curve(dnorm(x,mean=mean(Z[, 4]),sd=sd(Z[, 4])),add=T)
M3 <- read.csv("../../data/m3.csv", as.is = T)
head(M3)
dates <- strptime(M3$Month, "%Y-%m-%d")
m3 <- zoo(M3$M3, order.by = dates)
print(head(m3), style = "horizontal")
print(head(m3), style = "vertical")
print(head(m3), style = "plain")
elec <- read.csv("../../data/electricity.csv", as.is = TRUE)
head(elec)
datetime <- paste(elec[, 1], elec[, 2])
head(datetime)
dat <- strptime(datetime, "%Y-%m-%d %H:%M")
dat
tser <- zoo(elec[, 3], order.by = length(unique(dat))
length(unique(dat))
dim(unique(dat))
tser <- zoo(elec[, 3], order.by = unique(dat))
plot(tser)
Z <- matrix(NA, 3, 3)
plag <- 0:2
qlag <- 0:2
for (ip in 1:3) {
for (iq in 1:3) {
Z[ip, iq] <- arima(invest1, order = c(plag[ip], 1, qlag[iq]))$aic
}
}
print(Z)
which.min(Z)
plag <- 0:2
aicarima <- function(pq){
return(arima(invest1, order = c(pq[1], 1, pq[2]))$aic)
}
invest1
sapply(plag,aicarima)
expand.grid(0:2,0:2)
sapply(expand.grid(0:2,0:2),aicarima)
invest1 <- ts(invest[, 2], start = 1970, frequency = 1)
plot(invest1, type = "o")
plot(diff(log(invest1)), type = "o")
library(vars)
R <- 1000
Z <- matrix(NA, R, 4)
TT <- 200
A <- matrix(c(0.9, 0.5, 0, 0.5), 2, 2)
SIGepsi <- matrix(c(1, 0.3, 0.3, 1), 2, 2)
muepsi <- matrix(c(0,0),2,1)
# create progress bar
library(tcltk)
pb <- tkProgressBar(title = "progress bar", min = 0, max = R, width = 300)
for (r in 1:R) {
y <- matrix(NA, TT, 2)
colnames(y) <- c("y1","y2")
y[1, ] <- c(0, 0)
for (tt in 2:TT) {
epsi <- mvrnorm(n = 1, mu = muepsi, Sigma = SIGepsi)
y[tt, ] <- A %*% y[tt-1, ] + epsi
}
res <- VAR(y[101:200, ], p = 1)
y1ccoef <- res$varresult$y1$coefficients[1:2]
y2ccoef <- res$varresult$y2$coefficients[1:2]
Z[r, ] <- c(y1ccoef, y2ccoef)
setTkProgressBar(pb, r, label=paste(round(r/R*100, 0),"% done"))
}
close(pb)
apply(Z, 2, mean)
library(MASS)
par(mfrow = c(2, 2))
for (j in dim(Z)[2]) {
truehist(Z[, j])
curve(dnorm(x,mean=mean(Z[, j]),sd=sd(Z[, j])),add=T)
}
par(mfrow = c(2, 2))
for (j in 1:dim(Z)[2]) {
truehist(Z[, j])
curve(dnorm(x,mean=mean(Z[, j]),sd=sd(Z[, j])),add=T)
}
apply(Z, 2, mean)
A
print(rbind(apply(Z, 2, mean),t(A))
)
A
)
print(rbind(apply(Z, 2, mean),vec(A))
)
print(rbind(apply(Z, 2, mean),t(vec(A))))
print(rbind(t(apply(Z, 2, mean)),vec(t(A))))
t(apply(Z, 2, mean))
apply(Z, 2, mean)
vec(t(A))
t(vec(t(A)))
apply(Z, 2, mean)
t(vec(t(A)))
resMat <- rbind(apply(Z, 2, mean), t(vec(t(A))))
rownames(resMat) <- c("simulated", "true")
print(resMat)
colnames(resMat) <- c("A(1,1)", "A(1,2)", "A(2,1)", "A(2,2)")
rownames(resMat) <- c("simulated", "true")
print(resMat)
for (j in 1:dim(Z)[2]) {
truehist(Z[, j], main="T")
curve(dnorm(x,mean=mean(Z[, j]),sd=sd(Z[, j])),add=T)
}
for (j in 1:dim(Z)[2]) {
truehist(Z[, j], ylab="")
curve(dnorm(x,mean=mean(Z[, j]),sd=sd(Z[, j])),add=T)
}
for (j in 1:dim(Z)[2]) {
truehist(Z[, j], xlab="")
curve(dnorm(x,mean=mean(Z[, j]),sd=sd(Z[, j])),add=T)
}
for (j in 1:dim(Z)[2]) {
truehist(Z[, j], xlab=paste("Z[,",j,"]"))
curve(dnorm(x,mean=mean(Z[, j]),sd=sd(Z[, j])),add=T)
}
for (j in 1:dim(Z)[2]) {
truehist(Z[, j], xlab=paste("Z[,",j,"]",sep=""))
curve(dnorm(x,mean=mean(Z[, j]),sd=sd(Z[, j])),add=T)
}
for (j in 1:dim(Z)[2]) {
truehist(Z[, j], xlab=paste("A[j"]",sep=""))
curve(dnorm(x,mean=mean(Z[, j]),sd=sd(Z[, j])),add=T)
}
for (j in 1:dim(Z)[2]) {
truehist(Z[, j], xlab=paste("A[",j,"]",sep=""))
curve(dnorm(x,mean=mean(Z[, j]),sd=sd(Z[, j])),add=T)
}
library(vars)
library(vars)
# initialization and settings for simulation
R <- 1000
Z <- matrix(NA, R, 4)
A <- matrix(c(0.9, 0.5, 0, 0.5), 2, 2)
A
SIGepsi <- matrix(c(1, 0.3, 0.3, 1), 2, 2)
SIGepsi
muepsi <- matrix(c(0,0),2,1)
muepsi
library(tcltk)
pb <- tkProgressBar(title = "progress bar", min = 0, max = R, width = 300)
library(vars)
# initialization and settings for simulation
R <- 1000
Z <- matrix(NA, R, 4)
TT <- 200
A <- matrix(c(0.9, 0.5, 0, 0.5), 2, 2)
SIGepsi <- matrix(c(1, 0.3, 0.3, 1), 2, 2)
muepsi <- matrix(c(0,0),2,1)
# create progress bar
library(tcltk)
pb <- tkProgressBar(title = "progress bar", min = 0, max = R, width = 300)
# simulations
for (r in 1:R) {
# initialize data vector
y <- matrix(NA, TT, 2)
colnames(y) <- c("y1","y2")
y[1, ] <- c(0, 0)
# simulate data for y
for (tt in 2:TT) {
epsi <- mvrnorm(n = 1, mu = muepsi, Sigma = SIGepsi)
y[tt, ] <- A %*% y[tt-1, ] + epsi
}
# discard first 100 observations and estimate VAR(1)
res <- VAR(y[101:200, ], p = 1)
# extract the autoregressive coefficients only, skip intercept terms
y1ccoef <- res$varresult$y1$coefficients[1:2]
y2ccoef <- res$varresult$y2$coefficients[1:2]
# store results
Z[r, ] <- c(y1ccoef, y2ccoef)
# update progress bar
setTkProgressBar(pb, r, label=paste(round(r/R*100, 0),"% done"))
}
close(pb) # close progress bar
resMat <- rbind(apply(Z, 2, mean), t(vec(t(A))))
colnames(resMat) <- c("A(1,1)", "A(1,2)", "A(2,1)", "A(2,2)")
rownames(resMat) <- c("Simulated", "True")
print(resMat)
library(MASS)
par(mfrow = c(2, 2))
for (j in 1:dim(Z)[2]) {
truehist(Z[, j], xlab=paste("A[",j,"]",sep=""))
curve(dnorm(x,mean=mean(Z[, j]),sd=sd(Z[, j])),add=T)
}
library(vars)
# initialization and settings for simulation
R <- 1000
Z <- matrix(NA, R, 4)
TT <- 200
A <- matrix(c(0.9, 0.5, 0, 0.5), 2, 2)
SIGepsi <- matrix(c(1, 0.3, 0.3, 1), 2, 2)
muepsi <- matrix(c(0,0),2,1)
# create progress bar
library(tcltk)
pb <- tkProgressBar(title = "progress bar", min = 0, max = R, width = 300)
# simulations
for (r in 1:R) {
# initialize data vector
y <- matrix(NA, TT, 2)
colnames(y) <- c("y1","y2")
y[1, ] <- c(0, 0)
# simulate data for y
for (tt in 2:TT) {
epsi <- mvrnorm(n = 1, mu = muepsi, Sigma = SIGepsi)
y[tt, ] <- A %*% y[tt-1, ] + epsi
}
# discard first 100 observations and estimate VAR(1)
res <- VAR(y[101:200, ], p = 1)
# extract the autoregressive coefficients only, skip intercept terms
y1ccoef <- res$varresult$y1$coefficients[1:2]
y2ccoef <- res$varresult$y2$coefficients[1:2]
# store results
Z[r, ] <- c(y1ccoef, y2ccoef)
# update progress bar
setTkProgressBar(pb, r, label=paste(round(r/R*100, 0),"% done"))
}
close(pb) # close progress bar
resMat <- rbind(apply(Z, 2, mean), t(vec(t(A))))
colnames(resMat) <- c("A(1,1)", "A(1,2)", "A(2,1)", "A(2,2)")
rownames(resMat) <- c("Simulated", "True")
print(resMat)
library(MASS)
par(mfrow = c(2, 2))
for (j in 1:dim(Z)[2]) {
truehist(Z[, j], xlab=paste("A[",j,"]",sep=""))
curve(dnorm(x,mean=mean(Z[, j]),sd=sd(Z[, j])),add=T)
}
library(vars)
# initialization and settings for simulation
R <- 1000
Z <- matrix(NA, R, 4)
TT <- 200
A <- matrix(c(0.9, 0.5, 0, 0.5), 2, 2)
SIGepsi <- matrix(c(1, 0.3, 0.3, 1), 2, 2)
muepsi <- matrix(c(0,0),2,1)
# create progress bar
library(tcltk)
pb <- tkProgressBar(title = "progress bar", min = 0, max = R, width = 300)
# simulations
for (r in 1:R) {
# initialize data vector
y <- matrix(NA, TT, 2)
colnames(y) <- c("y1","y2")
y[1, ] <- c(0, 0)
# simulate data for y
for (tt in 2:TT) {
epsi <- mvrnorm(n = 1, mu = muepsi, Sigma = SIGepsi)
y[tt, ] <- A %*% y[tt-1, ] + epsi
}
# discard first 100 observations and estimate VAR(1)
res <- VAR(y[101:200, ], p = 1)
# extract the autoregressive coefficients only, skip intercept terms
y1ccoef <- res$varresult$y1$coefficients[1:2]
y2ccoef <- res$varresult$y2$coefficients[1:2]
# store results
Z[r, ] <- c(y1ccoef, y2ccoef)
# update progress bar
setTkProgressBar(pb, r, label=paste(round(r/R*100, 0),"% done"))
}
close(pb) # close progress bar
resMat <- rbind(apply(Z, 2, mean), t(vec(t(A))))
colnames(resMat) <- c("A(1,1)", "A(1,2)", "A(2,1)", "A(2,2)")
rownames(resMat) <- c("Simulated", "True")
print(resMat)
library(MASS)
par(mfrow = c(2, 2))
for (j in 1:dim(Z)[2]) {
truehist(Z[, j], xlab=paste("A[",j,"]",sep=""))
curve(dnorm(x,mean=mean(Z[, j]),sd=sd(Z[, j])),add=T)
}
library(MASS)
clt <- function(n, distrib, df=3, lambda=5, prob=0.6) {
R <- 10000
Z <- rep(NA, R)
for (r in 1:R) {
if (distrib == 1){
X <- runif(n)
strdist <- "Uniform"
}
if (distrib == 2){
X <- rt(n, df = df)
strdist <- "Student''s t"
}
if (distrib == 3){
X <- rbinom(n, size=1, prob=prob)
strdist <- "Bernoulli"
}
if (distrib == 4){
X <- rpois(n, lambda = lambda)
strdist <- "Poisson"
}
Z[r] <- sum(X)
}
truehist(Z, col = "lightblue", xlab = strdist, main = paste("n =", n, sep = " "))
coord <- par("usr")
# par("usr") gives you a vector of the form c(x1, x2, y1, y2)
# giving the extremes of the coordinates of the plotting region
x <- seq(coord[1], coord[2], by = 0.1)
lines(x, dnorm(x, mean = mean(Z), sd = sd(Z)), lwd = 2)
}
```
```{r}
par(mfrow = c(2,2))
for (n in c(5,50,500,5000)) {
for (i in 1:4) {
clt(n,i)
}
}
